# M12.SlickCarousel:Slick
prototype(M12.SlickCarousel:Slick) < prototype(M12.Foundation:Content) {
	templatePath = 'resource://M12.SlickCarousel/Private/Templates/NodeTypes/Slick.html'
	sectionName = 'sliderRoot'

	attributes.id = ${q(node).property('customHtmlId') ? q(node).property('customHtmlId') : 'slick-'+q(node).property('_identifier')}
	attributes.class.base = 'slick'

	slickConfig = TYPO3.TypoScript:RawArray {
		adaptiveHeight      = ${q(node).property('adaptiveHeight') ? true : false}
		autoplay            = ${q(node).property('autoplay') ? true : false}
		autoplaySpeed       = ${q(node).property('autoplaySpeed') ? q(node).property('autoplaySpeed') : 3000}
		arrows              = ${q(node).property('arrows') ? true : false}
		centerMode          = ${q(node).property('centerMode') ? true : false}
		dots                = ${q(node).property('dots') ? true : false}
		draggable           = ${q(node).property('draggable') ? true : false}
		fade                = ${q(node).property('fade') ? true : false}
		easing              = ${q(node).property('easing') ? q(node).property('easing') : 'linear'}
		infinite            = ${q(node).property('infinite') ? true : false}
		initialSlide        = ${q(node).property('initialSlide') ? q(node).property('initialSlide') : 0}
		pauseOnHover        = ${q(node).property('pauseOnHover') ? true : false}
		pauseOnDotsHover    = ${q(node).property('pauseOnDotsHover') ? true : false}
		responsive          = ${q(node).property('responsive') ? q(node).property('responsive') : '{}'}
		slidesToShow        = ${q(node).property('slidesToShow') ? q(node).property('slidesToShow') : 1}
		slidesToScroll      = ${q(node).property('slidesToScroll') ? q(node).property('slidesToScroll') : 1}
		speed               = ${q(node).property('speed') ? q(node).property('speed') : 300}
		variableWidth       = ${q(node).property('variableWidth') ? true : false}
		vertical            = ${q(node).property('vertical') ? true : false}
		rtl                 = ${q(node).property('rtl') ? true : false}
	}

	slickContainerAttributes = ${this.attributes}

	slickContent = TYPO3.TypoScript:Collection {
		collection = ${q(node).children()}
		itemRenderer = M12.SlickCarousel:SlickItem
		itemName = 'node'
		iterationName = 'iterator'

		# Add additional wrapping to slick-content, because otherwise createjs won't work (it requires elements of contentcollection to be direct children of contentcollection).
		# Can be removed when createjs is dropped.
		@process.contentElementWrapping = TYPO3.Neos:ContentElementWrapping
	}

	@process.wrapRemover = M12.Utils:WrapRemover
	@process.wrapRemover.wrapperClass = 'extra-wrapper-required-by-neos-backend'
}

# M12.SlickCarousel:SlickItem
prototype(M12.SlickCarousel:SlickItem) < prototype(TYPO3.TypoScript:Tag) {
	tagName = 'div'
	attributes.class = 'slick-item'

	content = TYPO3.Neos:ContentCase

	prototype(TYPO3.Neos:Content) {
		# Remove contentElementWrapping, because wrapping is already added for SlickItem (see below)
		@process.contentElementWrapping >
	}

	@process.contentElementWrapping = TYPO3.Neos:ContentElementWrapping
}
